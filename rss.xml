<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Coding Blog]]></title><description><![CDATA[Coding Blog]]></description><link>http://dijs.github.io/blog/</link><generator>metalsmith-feed</generator><lastBuildDate>Sat, 04 Jun 2016 21:34:02 GMT</lastBuildDate><atom:link href="http://dijs.github.io/blog/rss.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Richard van der Dys III]]></author><item><title><![CDATA[Financial Independence with Mint]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Financial Independence with Mint</title></head><body><header><a href="../" class="back">« Back</a><h1>Financial Independence with Mint</h1></header><time>April 30, 2016</time><article><p>Learning how to&nbsp;handle money is an&nbsp;important part of&nbsp;growing up. The&nbsp;sooner we can learn and&nbsp;apply good financial skills, the&nbsp;easier the&nbsp;rest of&nbsp;our financial life will be.</p>
<p>I&nbsp;have been using Mint for&nbsp;over five years now. It is now core part of&nbsp;our budgeting and&nbsp;financial workflow.</p>
<p>Recently came across <a href="http://www.madfientist.com/">madFIentist</a> and&nbsp;was blown away by&nbsp;the fact that he not only writes great financial blog posts, but also builds tools to&nbsp;go along with them. That is something I&nbsp;can get behind.</p>
<p>I&nbsp;have been looking to&nbsp;use the&nbsp;data Mint accumulated for&nbsp;me and&nbsp;use my&nbsp;coding skills to&nbsp;reduce that data into something more useful.</p>
<p>After reading about and&nbsp;using his FI <a href="http://www.madfientist.com/financial-independence-spreadsheet/">spreadsheet</a>, I&nbsp;decided I&nbsp;could use similar formulas to&nbsp;calculate my&nbsp;financial independence data for&nbsp;me without ever having to&nbsp;update the&nbsp;spreadsheet.</p>
<p>My&nbsp;application reads, parses, transforms and&nbsp;reduces your Mint transactions into Financial Independence information.</p>
<p>Check it out <a href="https://github.com/dijs/mint-fi">here</a> and&nbsp;let me know what you think.</p>
<p><em>I&nbsp;would love to&nbsp;add more features and&nbsp;create a&nbsp;UI for&nbsp;it, but I&nbsp;just wanted to&nbsp;get something out for&nbsp;now.</em></p>
</article></body></html>]]></description><guid isPermaLink="false">Financial Independence with Mint</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Sat, 30 Apr 2016 05:00:00 GMT</pubDate></item><item><title><![CDATA[Vacbot Part 1]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Vacbot Part 1</title></head><body><header><a href="../" class="back">« Back</a><h1>Vacbot Part 1</h1></header><time>March 27, 2016</time><article><p>My&nbsp;wonderful wife recently bought me a&nbsp;iCreate 2 hackable roomba. She knows me well…</p>
<p>Many different ideas came to&nbsp;my mind while thinking about what to&nbsp;do with it. Most of&nbsp;them were a&nbsp;bit too grand scale, so I&nbsp;decided to&nbsp;get a&nbsp;feel for&nbsp;the roomba's hackability with a&nbsp;simple project first. I&nbsp;will create a&nbsp;drivable roomba with sight.</p>
<p>In&nbsp;order to&nbsp;start creating the&nbsp;robot, I&nbsp;did a&nbsp;lot of&nbsp;research and&nbsp;decided to&nbsp;use a&nbsp;raspberry pi for&nbsp;the "brain" of&nbsp;the bot instead of&nbsp;an arduino (which I&nbsp;had used before) because I&nbsp;needed WiFi, more <abbr>CPU</abbr>, easy power and&nbsp;serial inputs.</p>
<p>The&nbsp;pi setup was pretty straightforward. Installing the&nbsp;OS was simple with <abbr>NOOBS</abbr>. The&nbsp;<abbr>USB</abbr> WiFi adapter was easy to&nbsp;plugin and&nbsp;get <abbr>DHCP</abbr>, although getting a&nbsp;static IP took a&nbsp;lot of&nbsp;digging through forums to&nbsp;figure out and&nbsp;I am still not sure I&nbsp;completely understand what I&nbsp;did. But it works! Getting <abbr>SSH</abbr> setup was easy and&nbsp;made my&nbsp;life much easier.</p>
<p>Installing the&nbsp;camera to&nbsp;the pi was simple after watching an&nbsp;installation video. And&nbsp;thankfully there are easy to&nbsp;use programs already built for&nbsp;the module.</p>
<p>Getting anything to&nbsp;control the&nbsp;vacuum was a&nbsp;headache. I&nbsp;tried first with my&nbsp;mac, which for&nbsp;whatever reason was not creating a&nbsp;<abbr>TTY</abbr> to&nbsp;use for&nbsp;communicating. Thankfully, the&nbsp;pi did create one. Although, when trying to&nbsp;use any of&nbsp;the npm modules built for&nbsp;communication, they didn't work. After digging through the&nbsp;specs of&nbsp;the iCreate 2, it turns out the&nbsp;baud rate is different than the&nbsp;original iCreate. After forking one of&nbsp;the modules and&nbsp;updating the&nbsp;rate, I&nbsp;was good to&nbsp;go.</p>
<p>Next was figuring out video streaming. Lot's of&nbsp;people accomplished this in&nbsp;many different ways, but I&nbsp;think I&nbsp;found a&nbsp;great solution. This <a href="https://github.com/jacksonliam/mjpg-streamer">project</a> is capable of&nbsp;doing everything I&nbsp;needed. I&nbsp;cloned and&nbsp;compiled it on&nbsp;the pi and&nbsp;it already has a&nbsp;raspberry pi camera module interface built in! With one command, I&nbsp;was streaming high quality video at&nbsp;30 fps.</p>
<p>Now to&nbsp;find a&nbsp;way to&nbsp;use the&nbsp;power from the&nbsp;iCreate 2's serial cable to&nbsp;power my&nbsp;raspberry pi B+…</p>
<p>I&nbsp;have some ideas, but since I&nbsp;am not an&nbsp;electrical engineer, I&nbsp;am not confident they will work. I&nbsp;plan on&nbsp;trying to&nbsp;use the&nbsp;power wires from the&nbsp;serial cable and&nbsp;using a&nbsp;buck converter to&nbsp;get a&nbsp;constant 5v to&nbsp;a micro usb cable which is plugged into the&nbsp;pi. Then (this is where it gets weird) I&nbsp;want to&nbsp;take the&nbsp;data wires (and&nbsp;ground I&nbsp;think) and&nbsp;splice them to&nbsp;a <abbr>USB</abbr> A&nbsp;cable which I&nbsp;can plug into the&nbsp;pi for&nbsp;communicating.</p>
<p>Not sure if this will work, but I&nbsp;will find out when the&nbsp;parts arrive!</p>
<p>There is a&nbsp;lot more to&nbsp;this than I&nbsp;thought, but things are slowly coming together.</p>
<p>Next part coming soon.</p>
</article></body></html>]]></description><guid isPermaLink="false">Vacbot Part 1</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Sun, 27 Mar 2016 05:00:00 GMT</pubDate></item><item><title><![CDATA[Flashcards]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Flashcards</title></head><body><header><a href="../" class="back">« Back</a><h1>Flashcards</h1></header><time>December 31, 2014</time><article><p>Through my&nbsp;adventures of&nbsp;learning the&nbsp;Hungarian language, flashcards have been a&nbsp;great tool for&nbsp;memorizing new vocabulary. The&nbsp;best open source app I&nbsp;found was <a href="https://github.com/dae/anki">Anki</a>. The&nbsp;program was highly customizable and&nbsp;I found tons of&nbsp;free download-able decks online, full of&nbsp;study material. Downside was the&nbsp;mobile app. It was expensive and&nbsp;did not features I&nbsp;had seen on&nbsp;some other free flashcard apps.</p>
<p>A&nbsp;friend drew my&nbsp;attention to&nbsp;<a href="https://itunes.apple.com/us/app/flashcards/id478986342?mt=8">Flashcards</a> by&nbsp;<abbr>NKO</abbr>, which was a&nbsp;very fun app to&nbsp;use and&nbsp;it was free!</p>
<p>I&nbsp;wanted to&nbsp;use this new app for&nbsp;my mobile studying, but there was no way I&nbsp;was going to&nbsp;manually create hundreds of&nbsp;words…on&nbsp;my phone…</p>
<p>After doing a&nbsp;little research into the&nbsp;different applications deck file formats, I&nbsp;felt like hacking. Turned out that both apps just used compressed zip files as&nbsp;their outer shell and&nbsp;renamed the&nbsp;extensions. Anki used a&nbsp;complicated <abbr>SQL</abbr>ite database to&nbsp;store all of&nbsp;their information for&nbsp;each deck. I&nbsp;quickly was able to&nbsp;export the&nbsp;needed data rows (English and&nbsp;Hungarian columns) to&nbsp;a <abbr>CSV</abbr> file. The&nbsp;other app used a&nbsp;<abbr>FDK</abbr> file format, which archived a&nbsp;<abbr>JSON</abbr> (<abbr>YAY</abbr>!) configuration file and&nbsp;data files (Images and&nbsp;Sounds). This format was a&nbsp;bit harder to&nbsp;build.</p>
<p>My&nbsp;first run through was simple, I&nbsp;just created a&nbsp;text-only version of&nbsp;my Anki deck. Worked like a&nbsp;champ!</p>
<p>Next big idea was to&nbsp;add images. Ugh… I&nbsp;had a&nbsp;list of&nbsp;English words, and&nbsp;I needed relevant images to&nbsp;pair them with. First tried with Google… Nope, they cut you off quickly with their <abbr>API</abbr> limits. After a&nbsp;few more tries, Flickr turned out to&nbsp;be the&nbsp;best, and&nbsp;the easiest to&nbsp;use. Now I&nbsp;had the&nbsp;images and&nbsp;the word pair data.</p>
<p>Generating the&nbsp;<abbr>JSON</abbr> configuration file took a&nbsp;while to&nbsp;figure out. Turned out they only allow you to&nbsp;use a&nbsp;max of&nbsp;100 card decks in&nbsp;the free version of&nbsp;the app. I&nbsp;modified my&nbsp;conversion app to&nbsp;iterate through each word pair and&nbsp;link the&nbsp;images.</p>
<p>End result was awesome. Tons of&nbsp;pretty cards to&nbsp;flip through. Now to&nbsp;practice…</p>
<p>I&nbsp;was planning on&nbsp;released the&nbsp;source code of&nbsp;this project, was it became <abbr>VERY</abbr> domain specific. If anyone has a&nbsp;need for&nbsp;this source, please just <a href="mailto:richard.vanderdys@gmail.com">email</a> me. I&nbsp;would be happy to&nbsp;give it out.</p>
</article></body></html>]]></description><guid isPermaLink="false">Flashcards</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Wed, 31 Dec 2014 06:00:00 GMT</pubDate></item><item><title><![CDATA[Text Analysis with React]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Text Analysis with React</title></head><body><header><a href="../" class="back">« Back</a><h1>Text Analysis with React</h1></header><time>December 26, 2015</time><article><p>Okay. I&nbsp;created a&nbsp;sample React app which has a&nbsp;live text analyzer.</p>
<p>I&nbsp;think building the&nbsp;components within Javascript is cool, and&nbsp;would be up for&nbsp;doing that more.</p>
<p>Communication between components is crazy messy though. Maybe I&nbsp;am not doing it correctly, but even the&nbsp;documentation was confusing. In&nbsp;order to&nbsp;bind two components to&nbsp;listen and&nbsp;use a&nbsp;data element, I&nbsp;had to&nbsp;use vanilla Javascript event listeners and&nbsp;dispatchers… Really?</p>
<h3>Bottom line</h3>
<ul>
<li>Building app structure/markup in&nbsp;Javascript is a&nbsp;great idea.</li>
<li>Breaking down your app into simple testable components is wonderful</li>
<li>Component communication is down right confusing</li>
</ul>
<p>Check it out <a href="http://dijs.github.io/React-Text-Analysis/">here</a></p>
</article></body></html>]]></description><guid isPermaLink="false">Text Analysis with React</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Sat, 26 Dec 2015 06:00:00 GMT</pubDate></item><item><title><![CDATA[Log with Comments]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Log with Comments</title></head><body><header><a href="../" class="back">« Back</a><h1>Log with Comments</h1></header><time>December 25, 2015</time><article><p>Recently, I&nbsp;was debugging though a&nbsp;codebase and&nbsp;had inserted a&nbsp;bunch of&nbsp;logging statements in&nbsp;between the&nbsp;problem areas. Normally, after debugging and&nbsp;solving the&nbsp;issues, I&nbsp;would remove the&nbsp;logs and&nbsp;be done with it. Code is working again, done, move on&nbsp;with life…</p>
<p>Wrong!</p>
<p>It will bite you. Most of&nbsp;us cannot remember those fine details in&nbsp;our codebase, especially when the&nbsp;logic is any kind of&nbsp;complicated.</p>
<p>I&nbsp;have made the&nbsp;mistake many times, and&nbsp;it finally clicked for&nbsp;me. If I&nbsp;am already logging information which helps me understand what the&nbsp;program is doing, why not use that for&nbsp;comments? So, instead of&nbsp;ripping out the&nbsp;logs I&nbsp;added after debugging, I&nbsp;just convert them to&nbsp;practical future knowledge comments.</p>
<p>By&nbsp;the way, this does not replace following good code standards and&nbsp;using descriptive variable and&nbsp;function/method names, etc.</p>
<p>Example:</p>
<pre><code class="language-js lang-javascript"><span class="hljs-keyword">if</span>(balance - amount &gt; <span class="hljs-number">0</span>) {
  withdraw(amount);
}<span class="hljs-keyword">else</span>{
  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'not enough money'</span>);
}
</code></pre>
<p>There is a&nbsp;bug in&nbsp;this code. You cannot empty your account if you wanted to, because you must leave a&nbsp;balance larger than zero.</p>
<p>But by&nbsp;just glancing at&nbsp;it, that may not be immediately understood.</p>
<p>If I&nbsp;were debugging this code, I&nbsp;may do this:</p>
<pre><code class="language-js lang-javascript"><span class="hljs-keyword">if</span>(balance - amount &gt; <span class="hljs-number">0</span>) {
  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'withdrew '</span> + amount + <span class="hljs-string">' and left '</span> + (balance - amount));
  withdraw(amount);
}<span class="hljs-keyword">else</span>{
  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'not enough money'</span>);
}
</code></pre>
<p>After finding the&nbsp;error, I&nbsp;would switch that log statement to&nbsp;a useful comment.</p>
<pre><code class="language-javascript lang-javascript"><span class="hljs-comment">// Withdrawal amount must not exceed account balance, but can equal balance for emptying an account</span>
<span class="hljs-keyword">if</span>(balance - amount &gt;= <span class="hljs-number">0</span>) {
  withdraw(amount);
}<span class="hljs-keyword">else</span>{
  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">'not enough money'</span>);
}
</code></pre>
<p>Go an&nbsp;write some better comments, so you will understand your old code in&nbsp;the future!</p>
</article></body></html>]]></description><guid isPermaLink="false">Log with Comments</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Fri, 25 Dec 2015 06:00:00 GMT</pubDate></item><item><title><![CDATA[Reading List]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Reading List</title></head><body><header><a href="../" class="back">« Back</a><h1>Reading List</h1></header><time>December 17, 2014</time><article><p>I&nbsp;use <a href="http://readability.com">Readability</a> to&nbsp;bookmark all the&nbsp;articles I&nbsp;come across every day. Since I&nbsp;do not usually have time to&nbsp;sit down and&nbsp;read during the&nbsp;day, I&nbsp;read at&nbsp;night. Although, I&nbsp;prefer reading physical books to&nbsp;my laptop or&nbsp;phone screen. So, I&nbsp;decided to&nbsp;create books of&nbsp;all my&nbsp;articles per year. They would serve as&nbsp;reading list history and&nbsp;also ease the&nbsp;actual "reading" process.</p>
<p><strong>Plan</strong></p>
<ul>
<li>Export all my&nbsp;bookmarks from Readability</li>
<li>Compile the&nbsp;content of&nbsp;all the&nbsp;articles into a&nbsp;book format</li>
<li>Create <abbr>PDF</abbr> for&nbsp;backup and&nbsp;print</li>
</ul>
<p><strong>Export</strong></p>
<p>This was easy. Readbility just emails you a&nbsp;<abbr>JSON</abbr> document with all of&nbsp;your bookmark data. Or&nbsp;you can use their <abbr>API</abbr> to&nbsp;gather this information.</p>
<p><strong>Compile</strong></p>
<p>This was a&nbsp;bit more difficult. Since the&nbsp;export data did not include the&nbsp;article content, I&nbsp;had to&nbsp;"parse" the&nbsp;<abbr>URL</abbr>'s for&nbsp;content. Luckily, Readability's <abbr>API</abbr> includes their parser also.</p>
<p>I&nbsp;wrote this simple node application to&nbsp;combine the&nbsp;article contents together into a&nbsp;<abbr>HTML</abbr> page:</p>
<pre><code class="language-javascript lang-javascript"><span class="hljs-comment">//Create Reading List eBook</span>
<span class="hljs-keyword">var</span> readability = <span class="hljs-built_in">require</span>(<span class="hljs-string">'readability-api'</span>);
<span class="hljs-keyword">var</span> <span class="hljs-keyword">async</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">'async'</span>);

<span class="hljs-keyword">var</span> articleUrls = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./readability.json'</span>).bookmarks.map(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">article</span>) </span>{
	<span class="hljs-keyword">return</span> article.article__url;
});

readability.configure({
	parser_token: <span class="hljs-string">'&lt;API KEY&gt;'</span>
});

<span class="hljs-keyword">var</span> parser = <span class="hljs-keyword">new</span> readability.parser();

<span class="hljs-keyword">var</span> html = <span class="hljs-string">'&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset="UTF-8"&gt;&lt;link href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.1/css/bootstrap.min.css" rel="stylesheet"&gt;&lt;title&gt;Reading Material 2014&lt;/title&gt;&lt;/head&gt;&lt;body class="container"&gt;'</span>;

<span class="hljs-keyword">async</span>.each(articleUrls, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">url, done</span>) </span>{
	parser.parse(url, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">err, article</span>) </span>{
		<span class="hljs-keyword">if</span> (article) {
			html += <span class="hljs-string">'&lt;article&gt;&lt;h1&gt;'</span> + article.title + <span class="hljs-string">'&lt;/h1&gt;&lt;p&gt;'</span> + article.content + <span class="hljs-string">'&lt;/p&gt;&lt;/article&gt;'</span>;
		}
		done();
	});
}, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
	html += <span class="hljs-string">'&lt;/body&gt;&lt;/html&gt;'</span>;
	<span class="hljs-built_in">console</span>.log(html);
});
</code></pre>
<p>After creating and&nbsp;styling the&nbsp;<abbr>HTML</abbr> a&nbsp;bit, I&nbsp;used Google Chrome to&nbsp;print the&nbsp;page to&nbsp;<abbr>PDF</abbr> for&nbsp;me. I&nbsp;realize this could have been done within the&nbsp;node app also, but Chrome was quicker at&nbsp;the time.</p>
<p>Now each year I&nbsp;can have a&nbsp;digital history of&nbsp;what I&nbsp;read and&nbsp;have physical copies to&nbsp;fill my&nbsp;bookshelf with.</p>
</article></body></html>]]></description><guid isPermaLink="false">Reading List</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Wed, 17 Dec 2014 06:00:00 GMT</pubDate></item><item><title><![CDATA[Panhandling]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Panhandling</title></head><body><header><a href="../" class="back">« Back</a><h1>Panhandling</h1></header><time>December 16, 2015</time><article><h2>How much money could you make begging on&nbsp;the streets?</h2>
<h3>Ever wondered?</h3>
<p>After hearing plenty of&nbsp;stories about "fake" beggars, I&nbsp;decided to&nbsp;mathematically figure out how much one could earn by&nbsp;begging an&nbsp;entire year.</p>
<h3>Final formula:</h3>
<p><img src="https://latex.codecogs.com/gif.latex?%5Csum_%7Bd%3D1%7D%5E%7B365%7D%20%5Cleft%20%5B%5Csum_%7Bh%3D1%7D%5E%7B24%7D%20e%5E%7B-%5Cleft%20%28%20%5Cfrac%7Bh-12%7D%7B6%7D%20%5Cright%20%29%5E2%7D%20%5Cright%20%5D%20%5Ccdot%20%5Cfrac%7B%5Csin%20%5Cleft%20%28%5Cfrac%7Bd%7D%7B7%7D%20%5Cright%29%20+%201%7D%7B2%7D" alt="Formula"></p>
<h3>How I&nbsp;got there…</h3>
<p>I&nbsp;am using a&nbsp;bell curve function to&nbsp;find the&nbsp;estimates of&nbsp;earning throughout each day.</p>
<p>Then I&nbsp;use a&nbsp;wave function to&nbsp;find daily earning estimates throughout the&nbsp;week.</p>
<p>After using these two functions to&nbsp;transform the&nbsp;daily earnings, I&nbsp;calculate the&nbsp;summation of&nbsp;an entire year.</p>
<p>I&nbsp;realize that I&nbsp;could use <em>much</em> better functions for&nbsp;estimation, but this was just some quick research.</p>
<p>Finally, if you could find a&nbsp;way to&nbsp;earn $20/hr, you could make $39,030.67 annually according to&nbsp;this formula.</p>
</article></body></html>]]></description><guid isPermaLink="false">Panhandling</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Wed, 16 Dec 2015 06:00:00 GMT</pubDate></item><item><title><![CDATA[Stupid Mario]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Stupid Mario</title></head><body><header><a href="../" class="back">« Back</a><h1>Stupid Mario</h1></header><time>December 01, 2014</time><article><p>I&nbsp;have seen a&nbsp;bunch of&nbsp;neural network articles around Hacker News lately. The&nbsp;way I&nbsp;boiled it down was: if you could simplify a&nbsp;problem and&nbsp;solution down to&nbsp;a finite number of&nbsp;inputs and&nbsp;a binary output, you could train a&nbsp;network to&nbsp;solve that problem on&nbsp;its own.</p>
<p>I&nbsp;used to&nbsp;do a&nbsp;lot of&nbsp;Mario speed runs in&nbsp;high school. I&nbsp;was never any good, but to&nbsp;this day that is the&nbsp;only way I&nbsp;can play Mario now. It has been ingrained into my&nbsp;muscle memory.</p>
<p>What if I&nbsp;taught a&nbsp;neural network how to&nbsp;play Mario?</p>
<p><strong>Hypothesis</strong></p>
<p>Starting simple. I&nbsp;just want to&nbsp;see if I&nbsp;can train a&nbsp;network to&nbsp;<abbr>NOT</abbr> <abbr>DIE</abbr>. I&nbsp;will ask the&nbsp;network when to&nbsp;jump throughout the&nbsp;level. After so many experiences dying where he should jump, hopefully he will learn to&nbsp;jump.</p>
<p><strong>Setup</strong></p>
<p>I&nbsp;used the&nbsp;fantastic <a href="https://fir.sh/projects/jsnes/"><abbr>JSNES</abbr></a> to&nbsp;facilitate the&nbsp;game itself. I&nbsp;was able to&nbsp;easily grab the&nbsp;data I&nbsp;needed directly from the&nbsp;emulator's memory. I&nbsp;found this great <a href="http://datacrystal.romhacking.net/wiki/Super_Mario_Bros.:RAM_map">map</a> that made it easy to&nbsp;find the&nbsp;exact variables I&nbsp;used for&nbsp;training and&nbsp;event detection.</p>
<p>The&nbsp;next part was the&nbsp;brain itself.</p>
<p>I&nbsp;tried quite a&nbsp;few big open source neural network Javascript libraries, but due to&nbsp;development issues, I&nbsp;decided to&nbsp;just use a&nbsp;simple perceptron function.</p>
<p><strong>Training</strong></p>
<p>I&nbsp;wanted to&nbsp;training to&nbsp;be just like a&nbsp;human, visual. So my&nbsp;training input was a&nbsp;normalized frame buffer which I&nbsp;converted to&nbsp;greyscale for&nbsp;ease of&nbsp;use with the&nbsp;perceptron.</p>
<p>The&nbsp;output would be if Mario needed to&nbsp;jump right after that frame.</p>
<p>I&nbsp;simply trained the&nbsp;perceptron by&nbsp;detecting when Mario had died and&nbsp;used the&nbsp;previous buffer.</p>
<p>Automating the&nbsp;game play was the&nbsp;trickiest part. I&nbsp;had to&nbsp;detect game overs, collision deaths, and&nbsp;pit fall deaths, and&nbsp;automate Mario's controls.</p>
<p><strong>Outcome</strong></p>
<p>No, I&nbsp;do not have a&nbsp;perfect Mario player yet… that is why I&nbsp;titled this post <em>Stupid</em> Mario.</p>
<p>It is hard to&nbsp;truly tell if a&nbsp;network is learning until it makes sufficient progress.</p>
<p><a href="http://www.richardvanderdys.com/projects/stupid-mario">Try it out!</a></p>
<p><strong>Future Ideas</strong></p>
<ul>
<li>Use more events for&nbsp;training</li>
<li>Save/Load network data</li>
<li>Use a&nbsp;big name network library</li>
<li>Other games</li>
</ul>
</article></body></html>]]></description><guid isPermaLink="false">Stupid Mario</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Mon, 01 Dec 2014 06:00:00 GMT</pubDate></item><item><title><![CDATA[Random Sentences]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Random Sentences</title></head><body><header><a href="../" class="back">« Back</a><h1>Random Sentences</h1></header><time>November 22, 2014</time><article><p>Recently, I&nbsp;have been trying to&nbsp;learn the&nbsp;Hungarian language. After memorizing a&nbsp;bunch of&nbsp;words, just repeating them to&nbsp;study got boring. I&nbsp;wanted to&nbsp;write a&nbsp;program which randomly created sentences I&nbsp;could use to&nbsp;practice with. Of&nbsp;course, the&nbsp;best practice would be to&nbsp;go find a&nbsp;native speaker near me, but I&nbsp;wanted a&nbsp;challenge…</p>
<p><strong>Hypothesis</strong></p>
<p>In&nbsp;order to&nbsp;generate random sentences, I&nbsp;needed some kind of&nbsp;sentence building logic. I&nbsp;have used Markov Chains to&nbsp;build random names in&nbsp;the past, so why would it not work for&nbsp;sentences?</p>
<p><strong>Data</strong></p>
<p>First! I&nbsp;needed data. Thank God for&nbsp;<a href="http://www.gutenberg.org/">http://www.gutenberg.org/</a>. This saved me loads of&nbsp;time finding a&nbsp;bunch of&nbsp;random text.</p>
<p><strong>Training</strong></p>
<p>This was a&nbsp;lot of&nbsp;data, so I&nbsp;did not want to&nbsp;load it all in&nbsp;memory at&nbsp;once. Let's use Stream's!</p>
<p>I&nbsp;streamed the&nbsp;huge text data file and&nbsp;counted all the&nbsp;instances of&nbsp;each <a href="http://en.wikipedia.org/wiki/Bigram">bigram</a> and&nbsp;<a href="http://en.wikipedia.org/wiki/Trigram">trigram</a>. After counting, I&nbsp;sorted each word's adjacent neighbor by&nbsp;the number of&nbsp;instances. This gave me a&nbsp;list of&nbsp;words and&nbsp;their most used adajcent bigram and&nbsp;trigram neighbor.</p>
<p><strong>Generation</strong></p>
<p>With this Markov "link" data, I&nbsp;was able to&nbsp;generate rudimentary sentences. Nothing made sense, but it was easy to&nbsp;read.</p>
<p>These sentences are not logical, they are built by&nbsp;choosing what word should statistically come next.</p>
<p><strong>Ideas for&nbsp;the future:</strong></p>
<ul>
<li>Extract/Analyze subject, verb, object in&nbsp;each sentence</li>
<li>Use neural networks for&nbsp;training <em>next</em> word</li>
</ul>
<p><a href="http://www.richardvanderdys.com/projects/random-sentences">Try it out!</a></p>
<p><strong>Code</strong></p>
<pre><code class="language-js lang-javascript"><span class="hljs-comment">//Create Markov links</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createLinks</span>(<span class="hljs-params">input, output, n</span>) </span>{
	<span class="hljs-keyword">var</span> links = {};

	<span class="hljs-keyword">if</span> (!n) {
		n = <span class="hljs-number">2</span>; <span class="hljs-comment">// bigram by default</span>
	}

	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trainSentence</span>(<span class="hljs-params">sentence</span>) </span>{
		NGrams.ngrams(sentence, n).forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">gram</span>) </span>{
			<span class="hljs-keyword">var</span> word = gram[<span class="hljs-number">0</span>];
			<span class="hljs-keyword">var</span> neighbor = gram[n - <span class="hljs-number">1</span>];
			<span class="hljs-keyword">if</span> (!links[word]) {
				links[word] = {};
			}
			<span class="hljs-keyword">if</span> (!links[word][neighbor]) {
				links[word][neighbor] = <span class="hljs-number">0</span>;
			}
			links[word][neighbor] ++;
		});
	}

	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">read</span>(<span class="hljs-params"></span>) </span>{
		<span class="hljs-keyword">var</span> buffer;
		<span class="hljs-keyword">while</span> ((buffer = stream.read())) {
			buffer.toLowerCase().split(<span class="hljs-regexp">/\./g</span>).forEach(trainSentence);
		}
	}

	<span class="hljs-keyword">var</span> stream = fs.createReadStream(input, {
		encoding: <span class="hljs-string">'utf8'</span>
	});

	stream.on(<span class="hljs-string">'readable'</span>, read);

	stream.once(<span class="hljs-string">'end'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{

		<span class="hljs-keyword">var</span> sortedLinks = {};
		<span class="hljs-keyword">var</span> keys = <span class="hljs-built_in">Object</span>.keys(links);

		keys.forEach(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>) </span>{
			<span class="hljs-keyword">var</span> words = <span class="hljs-built_in">Object</span>.keys(links[key]);
			sortedLinks[key] = _.sortBy(words, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">word</span>) </span>{
				<span class="hljs-keyword">return</span> links[key][word];
			});
		});

		fs.writeFile(output, <span class="hljs-built_in">JSON</span>.stringify(sortedLinks, <span class="hljs-literal">null</span>, <span class="hljs-string">'\t'</span>));
	});
}
</code></pre>
<pre><code class="language-javascript lang-javascript"><span class="hljs-comment">//Generate Sentence</span>
<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">generateSentenceMark2</span>(<span class="hljs-params">bigramInput, trigramInput, length, k, dictionary, starter</span>) </span>{

	<span class="hljs-keyword">var</span> bigrams = <span class="hljs-built_in">require</span>(bigramInput);
	<span class="hljs-keyword">var</span> trigrams = <span class="hljs-built_in">require</span>(trigramInput);

	<span class="hljs-keyword">var</span> current = starter || _.sample(dictionary || <span class="hljs-built_in">Object</span>.keys(bigrams));
	<span class="hljs-keyword">var</span> last;

	<span class="hljs-keyword">var</span> sentence = [current];

	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dictionaryContains</span>(<span class="hljs-params">word</span>) </span>{
		<span class="hljs-keyword">return</span> _.contains(dictionary, word);
	}

	<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNeighbor</span>(<span class="hljs-params">links, word</span>) </span>{
		<span class="hljs-keyword">var</span> neighbors = links[word];
		<span class="hljs-keyword">if</span>(dictionary) {
			neighbors = neighbors.filter(dictionaryContains);
		}
		<span class="hljs-comment">// neighbors might be null or empty...</span>
		<span class="hljs-keyword">var</span> neighbor = neighbors[<span class="hljs-built_in">Math</span>.ceil(neighbors.length * <span class="hljs-built_in">Math</span>.random() * k)];
		<span class="hljs-comment">// Go through all of the words if word doesnt have neighbors</span>
		<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;
		<span class="hljs-keyword">while</span> (!_.has(links, neighbor) &amp;&amp; i &lt; neighbors.length) {
			neighbor = neighbors[i++];
		}
		<span class="hljs-keyword">return</span> neighbor;
	}

	<span class="hljs-comment">// Generate Neighbors</span>
	_(length - <span class="hljs-number">1</span>).times(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">i</span>) </span>{
		<span class="hljs-keyword">var</span> neighbor = i % <span class="hljs-number">2</span> === <span class="hljs-number">0</span> ? getNeighbor(bigrams, current) : getNeighbor(trigrams, last);
		last = current;
		current = neighbor;
		sentence.push(current);
	});

	<span class="hljs-keyword">return</span> sentence.join(<span class="hljs-string">' '</span>);
}
</code></pre>
</article></body></html>]]></description><guid isPermaLink="false">Random Sentences</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Sat, 22 Nov 2014 06:00:00 GMT</pubDate></item><item><title><![CDATA[Trees]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Trees</title></head><body><header><a href="../" class="back">« Back</a><h1>Trees</h1></header><time>November 03, 2015</time><article><p>I&nbsp;am a&nbsp;sucker for&nbsp;world generation techniques. I&nbsp;decided to&nbsp;mess around with some simple 2d tree generation. By&nbsp;using a&nbsp;simple tree structure and&nbsp;a bit of&nbsp;geometry and&nbsp;calculated the&nbsp;size, position, and&nbsp;direction of&nbsp;the limbs. The&nbsp;leaves are just connected to&nbsp;the end of&nbsp;limbs.</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/dijs/cxv3L5yw/embedded/result,js" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<p>After completing the&nbsp;2d version. I&nbsp;decided with a&nbsp;bit of&nbsp;more geometry, I&nbsp;could create a&nbsp;similar 3d version. Of&nbsp;course, I&nbsp;had to&nbsp;brush up on&nbsp;some 3d math, but the&nbsp;end result was worth it.</p>
<iframe width="100%" height="300" src="http://jsfiddle.net/dijs/4a0oah5r/embedded/result,js" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
<p>Refresh to&nbsp;see different trees!</p>
<p>Now that the&nbsp;3d math is figured out, I&nbsp;can try to&nbsp;make it look more realistic in&nbsp;the future.</p>
</article></body></html>]]></description><guid isPermaLink="false">Trees</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Tue, 03 Nov 2015 06:00:00 GMT</pubDate></item><item><title><![CDATA[Functional Programming]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Functional Programming</title></head><body><header><a href="../" class="back">« Back</a><h1>Functional Programming</h1></header><time>January 31, 2016</time><article><p>As&nbsp;I learn more about programming through the&nbsp;years, I&nbsp;find it incredible how the&nbsp;techniques I&nbsp;have come to&nbsp;love are normally very old.</p>
<p>I&nbsp;love math. Always have.</p>
<p>Math inherently does not have extra state laying around. I&nbsp;believe that when we transform our application's state, nothing external of&nbsp;our transformation context should affect the&nbsp;resultant state.</p>
<h3>What do I&nbsp;mean by&nbsp;this?</h3>
<p>Here is a&nbsp;simple example: <em>Let's create a&nbsp;function which computes the&nbsp;sum of&nbsp;a list of&nbsp;numbers.</em></p>
<p>Here is an&nbsp;example which uses extra dangerous state (<strong><abbr>DON</abbr>'T DO <abbr>THIS</abbr>!</strong>):</p>
<pre><code class="language-js lang-nimrod">// <span class="hljs-type">This</span> <span class="hljs-keyword">is</span> the external data which
// could be affected by other code
// <span class="hljs-keyword">in</span> this context
<span class="hljs-keyword">let</span> sum = <span class="hljs-number">0</span>
function computeSum (numbers) {
  numbers.forEach(n =&gt; sum += n)
}
computeSum([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])
<span class="hljs-keyword">const</span> <span class="hljs-literal">result</span> = sum
</code></pre>
<p>Now, a&nbsp;better example, using a&nbsp;more functional technique:</p>
<pre><code class="language-js lang-nimrod"><span class="hljs-keyword">const</span> bySum = (sum, n) =&gt; sum + n
// <span class="hljs-type">This</span> <span class="hljs-keyword">is</span> safe <span class="hljs-keyword">from</span> <span class="hljs-type">any</span>
// external code
<span class="hljs-keyword">const</span> sum = numbers =&gt; numbers.reduce(bySum)
<span class="hljs-keyword">const</span> <span class="hljs-literal">result</span> = sum([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>])
</code></pre>
<p>With functional programming, we can trust our code more. Functional code is more maintainable, predictable, doesn't mutate other code, can be reused, smaller, and&nbsp;sometimes more readable (depending on&nbsp;who is reading it).</p>
</article></body></html>]]></description><guid isPermaLink="false">Functional Programming</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Sun, 31 Jan 2016 06:00:00 GMT</pubDate></item><item><title><![CDATA[Hue Beats]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Hue Beats</title></head><body><header><a href="../" class="back">« Back</a><h1>Hue Beats</h1></header><time>January 24, 2016</time><article><p>I&nbsp;wanted to&nbsp;check in&nbsp;and show off my&nbsp;latest Hue project.</p>
<p>Since I&nbsp;am a&nbsp;developer/musician, I&nbsp;really enjoy messing with sound on&nbsp;the computer. Growing up, I&nbsp;adored all the&nbsp;music visualization programs we had. Very cool stuff.</p>
<p>After recently using the&nbsp;Hue lights to&nbsp;code a&nbsp;custom alarm system, I&nbsp;had the&nbsp;idea to&nbsp;create my&nbsp;own music visualization program. This is my&nbsp;first time, so…</p>
<p>I&nbsp;learned quickly, decoding audio data is tough. Or&nbsp;maybe I&nbsp;am missing something.</p>
<p>I&nbsp;could not find an&nbsp;audio library for&nbsp;node that just worked. One had a&nbsp;binary dependency that wouldn't compile on&nbsp;my <abbr>OSX</abbr>. I&nbsp;ended up just using a&nbsp;node version of&nbsp;the WebAudio <abbr>API</abbr>, which is really cool. But still, I&nbsp;am an&nbsp;audio processing n00b.</p>
<p>Anyways, I&nbsp;got something working even though the&nbsp;timing is a&nbsp;little off.</p>
<p>Enjoy.</p>
<video width="320" height="240" controls="">
 <source src="../public/videos/hue-beats-480.webm" type="video/webm">
Your browser does not support the&nbsp;video tag.
</video>
</article></body></html>]]></description><guid isPermaLink="false">Hue Beats</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Sun, 24 Jan 2016 06:00:00 GMT</pubDate></item><item><title><![CDATA[Workflow]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Workflow</title></head><body><header><a href="../" class="back">« Back</a><h1>Workflow</h1></header><time>September 19, 2015</time><article><p>Over the&nbsp;years, my&nbsp;development workflow has changed tremendously. Whether learning from past problem solving experiences, studying software patterns, or&nbsp;learning from other developers, my&nbsp;view on&nbsp;workflow has changed.</p>
<p>A&nbsp;brief personal coding history:</p>
<p><strong>High School (2007):</strong> No OO, no tests, no code repos, no libraries. I&nbsp;was <nobr>re-inventing</nobr> the&nbsp;wheel wherever I&nbsp;went.</p>
<p><strong>College:</strong> Object oriented design, basic patterns.</p>
<p><strong>First Job:</strong> Libraries. Still developing on&nbsp;production code, haha…</p>
<p><strong>Second Job:</strong> Started open source contributing. Used <abbr>SVN</abbr> (gross).</p>
<p><strong>Current Job:</strong> Tests. Modular design patterns. Git.</p>
<p>There it is, eight years of&nbsp;learning.</p>
<p>I&nbsp;would like to&nbsp;share my&nbsp;current workflow, one that I&nbsp;use for&nbsp;almost all of&nbsp;my projects currently, and&nbsp;has served me well.</p>
<h3>1. State the&nbsp;problem or&nbsp;idea</h3>
<p>This is the&nbsp;first and&nbsp;most important step. You must clearly understand your problem or&nbsp;idea. This is <strong>not</strong> the&nbsp;time to&nbsp;think about implementation! What you are doing here is defining the&nbsp;input and&nbsp;expected output. Think of&nbsp;use cases your solution will be solving.</p>
<h3>2. Design and&nbsp;Draw Solution</h3>
<p>You should spend a&nbsp;lot of&nbsp;time on&nbsp;this one. Find a&nbsp;whiteboard, and&nbsp;get drawing. Define where the&nbsp;data is coming from, and&nbsp;where it is going. Draw how things are connected and&nbsp;what information will be sent between them. Think about the&nbsp;logic expressions you will need. If your data will need to&nbsp;be transformed, draw some examples. At&nbsp;this stage, you are writing down all your design ideas.</p>
<h3>3. Modularize Design</h3>
<p>Before you start on&nbsp;this one, unless you are lucky enough to&nbsp;have two white boards, take a&nbsp;picture of&nbsp;your original solution design. During this step, you are going to&nbsp;simplify and&nbsp;modularize your solution. Start by&nbsp;extracting functionality into independent modules. This allows them to&nbsp;have a&nbsp;clear purpose. What you are doing in&nbsp;this stage is breaking down larger problems into smaller problems. This has many great side effects including easier testability, reusability, and&nbsp;maintainability.</p>
<h3>4. Create unit tests for&nbsp;modules</h3>
<p>Let’s make sure the&nbsp;modules will work as&nbsp;expected after we implement them. Since you have the&nbsp;designs for&nbsp;clear and&nbsp;independent modules now, think about the&nbsp;required parameters of&nbsp;each module and&nbsp;their respective required results. Now write unit tests based on&nbsp;your module requirements.</p>
<h3>5. Implement modules</h3>
<p>This one should be straight forward. Implement modules which are validated by&nbsp;your units tests. You might be thinking I&nbsp;am a&nbsp;full on&nbsp;“Test Driven Development” dude by&nbsp;now. I’m not. I&nbsp;just picked up ideas from my&nbsp;peers at&nbsp;work and&nbsp;molded some of&nbsp;their philosophies into my&nbsp;development workflow. “Use only that which works, and&nbsp;take it from any place you can find it.”&nbsp;— Bruce Lee</p>
<h3>6. Create use case tests</h3>
<p>Now that you have your modules created and&nbsp;tested, let’s write use case tests. These will be <nobr>end-to</nobr>-end test scenarios which cover your entire solution. They will touch many of&nbsp;yours modules. That being said. I&nbsp;am an&nbsp;advocate of&nbsp;<strong>really really fast tests</strong>, so make sure you mock, stub, do whatever you need to&nbsp;do in&nbsp;order to&nbsp;<strong>not</strong> call actual outside services. That wastes time.</p>
<h3>7. Tie together modules to&nbsp;implement solution</h3>
<p>By&nbsp;the time you get to&nbsp;this step, you should definitely know how your modules should be connected, which coding patterns you will use, and&nbsp;the overall structure of&nbsp;the codebase. Just to&nbsp;point out, this is <strong>not a&nbsp;waterfall</strong> workflow, be agile! If you you need to&nbsp;step back in&nbsp;the process, do it, but <strong>follow the&nbsp;order</strong> of&nbsp;the stages. Do not implement code before you design and&nbsp;write the&nbsp;initial tests for&nbsp;it. Once your use case tests pass, your solution should be complete.</p>
<p>There is my&nbsp;workflow. I&nbsp;would love to&nbsp;get some feedback, so please leave me some comments below.</p>
<p>Thanks</p>
</article></body></html>]]></description><guid isPermaLink="false">Workflow</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Sat, 19 Sep 2015 05:00:00 GMT</pubDate></item><item><title><![CDATA[The Middleman]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>The Middleman</title></head><body><header><a href="../" class="back">« Back</a><h1>The Middleman</h1></header><time>April 28, 2015</time><article><p>So… are you mobile friendly according to&nbsp;Google?</p>
<p>I&nbsp;was recently working on&nbsp;fixing some mobile issues at&nbsp;my place of&nbsp;work. I&nbsp;was required to&nbsp;push to&nbsp;production for&nbsp;each change since our development servers are locked down and&nbsp;not visible to&nbsp;Google.</p>
<p>In&nbsp;order to&nbsp;quickly make changes and&nbsp;test them I&nbsp;needed another development environment visible to&nbsp;Google with a&nbsp;clone of&nbsp;the website I&nbsp;was working on.</p>
<p>My&nbsp;first idea was to&nbsp;proxy the&nbsp;website through a&nbsp;small Node proxy server and&nbsp;modify the&nbsp;response. This kinda worked, but I&nbsp;ran in&nbsp;to too many brick walls…</p>
<p>I&nbsp;needed more control.</p>
<p>Why not just mirror the&nbsp;response?</p>
<p>What I&nbsp;ended up with was a&nbsp;application that would cache a&nbsp;<abbr>HTTP</abbr> response for&nbsp;a given <abbr>URL</abbr> and&nbsp;modify the&nbsp;page by&nbsp;adding <abbr>CSS</abbr> and&nbsp;Javascript to&nbsp;the response. If there are any dependencies, the&nbsp;server will proxy them through with a&nbsp;little Express magic.</p>
<p><a href="http://middleman.dijsapps.us">Try it out!</a></p>
<p>Check out the&nbsp;<a href="https://github.com/dijs/middleman">source</a>.</p>
<h3>Future</h3>
<ul>
<li>Add a&nbsp;edit page to&nbsp;accompany the&nbsp;view, currently you just make another middleman page</li>
<li>Add more modification options</li>
</ul>
</article></body></html>]]></description><guid isPermaLink="false">The Middleman</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Tue, 28 Apr 2015 05:00:00 GMT</pubDate></item><item><title><![CDATA[Hotspots]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Hotspots</title></head><body><header><a href="../" class="back">« Back</a><h1>Hotspots</h1></header><time>April 09, 2015</time><article><p>I&nbsp;recently wrote a&nbsp;little tool that implements a&nbsp;simple algorithm proposed in&nbsp;<a href="http://google-engtools.blogspot.com/2011/12/bug-prediction-at-google.html">this</a> Google article. The&nbsp;idea is you can analyze your codebase and&nbsp;score each source file with a&nbsp;"bugginess".</p>
<p>The&nbsp;problem we are trying to&nbsp;solve here is to&nbsp;mitigate the&nbsp;common "Look's good to&nbsp;me" when code reviewing.</p>
<p>It is easy to&nbsp;understand why this problem exists. As&nbsp;any codebase and&nbsp;team grows, this problem grows in&nbsp;turn. With many developers changing source code over time, the&nbsp;learning curve for&nbsp;the codebase becomes more difficult. This problem can arise when the&nbsp;code reviewer does not fully understand the&nbsp;language, pattern, organization, structure, and&nbsp;history of&nbsp;the code.</p>
<p>Code history holds a&nbsp;ton of&nbsp;knowledge. We humans would have a&nbsp;hard time holding the&nbsp;full history of&nbsp;a codebase in&nbsp;our head though… so let's automate it.</p>
<p>If we can figure out how buggy a&nbsp;source file is, a&nbsp;code reviewer can be confident in&nbsp;knowing how dangerous their "Look's good to&nbsp;me" comment will be. For&nbsp;example, if a&nbsp;file's bugginess score is very low, the&nbsp;reviewer can quickly look over the&nbsp;changed content and&nbsp;know that this file has rarely caused issues in&nbsp;the past. Although, on&nbsp;the other hand, if the&nbsp;file has a&nbsp;high score, the&nbsp;developer might want to&nbsp;ask for&nbsp;more developers to&nbsp;review the&nbsp;code being changed.</p>
<p>So how can we figure out the&nbsp;score of&nbsp;a source file?</p>
<p>In&nbsp;the original implentation, the&nbsp;algorithm used purely git commit messages to&nbsp;figure out if the&nbsp;files being changed were related to&nbsp;a bug fix. In&nbsp;my organization, we do not have that luxury. Our commit messages have evolved over time and&nbsp;we have used other tracking tools to&nbsp;communicate the&nbsp;purpose of&nbsp;code changes. Thankfully we have years of&nbsp;history in&nbsp;our tracking tool. And&nbsp;each story tied to&nbsp;code changes has a&nbsp;"type" we can filter by.</p>
<p>Now we have our commits related to&nbsp;bug fixes.</p>
<p>In&nbsp;order to&nbsp;score each file, we could just count the&nbsp;number of&nbsp;commits that changed said file. Although, a&nbsp;Google engineer came up with a&nbsp;fancy formula for&nbsp;value-over-time which we will use instead.</p>
<p><img src="http://www5a.wolframalpha.com/Calculate/MSP/MSP1961d4c2f091817g7830000162bi7adedi5h9da?MSPStoreType=image/gif&amp;s=11&amp;w=130.&amp;h=39." alt="t = 0..1"></p>
<p>The&nbsp;commit time is normalized by&nbsp;treating 0 as&nbsp;the first commit time and&nbsp;1 as&nbsp;the current time. For&nbsp;each commit, this score is added to&nbsp;the changed file's total score.</p>
<p>As&nbsp;for the&nbsp;implentation, I&nbsp;used local git commands instead of&nbsp;hitting Github's <abbr>API</abbr> for&nbsp;two reasons:</p>
<ul>
<li>Speed of&nbsp;commit searching and&nbsp;information retrieval</li>
<li>Did not want users to&nbsp;have to&nbsp;hassle with another <abbr>API</abbr> token</li>
</ul>
<p>After building the&nbsp;data, I&nbsp;sort it and&nbsp;output the&nbsp;result to&nbsp;a <abbr>CSV</abbr> file for&nbsp;ease of&nbsp;visualization.</p>
<p>I&nbsp;simply dragged it into Google Drive and&nbsp;created a&nbsp;chart in&nbsp;seconds, which showed where our dangerous code lived.</p>
<p>Check out the&nbsp;<a href="https://github.com/dijs/hotspots">code</a>!</p>
<h3>Future Ideas</h3>
<ul>
<li>Integrate more tracking tools</li>
<li>Use Github Issues as&nbsp;a source of&nbsp;data</li>
<li>Allow for&nbsp;custom <nobr>value-of</nobr>-time formulas</li>
<li>Modularize the&nbsp;commit gathering (choose local git, github, bitbucket)</li>
</ul>
</article></body></html>]]></description><guid isPermaLink="false">Hotspots</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Thu, 09 Apr 2015 05:00:00 GMT</pubDate></item><item><title><![CDATA[Mutation Testing in Javascript]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Mutation Testing in Javascript</title></head><body><header><a href="../" class="back">« Back</a><h1>Mutation Testing in Javascript</h1></header><time>March 01, 2015</time><article><h3>Intro</h3>
<p>Mutation testing is hard… But totally worth it!</p>
<p>I&nbsp;recently learned about the&nbsp;concept from a&nbsp;colleague. For&nbsp;those who might not know what it is:</p>
<p>Testing by&nbsp;mutation calculates the&nbsp;durability of&nbsp;your unit tests against mutated versions of&nbsp;your source code. These mutant versions are designed to&nbsp;be the&nbsp;result of&nbsp;common programming errors. Since there are many different types of&nbsp;errors, this means that normally a&nbsp;large number of&nbsp;mutants are created and&nbsp;tested. These mutants would be extremely difficult to&nbsp;create by&nbsp;hand, so mutants are generally automatically generated from changing the&nbsp;source code using common <em>error</em> patterns.</p>
<p>Error pattern examples may include switching conditional, logical, and&nbsp;arithmetic operators. Possibly even changing the&nbsp;value of&nbsp;literals within the&nbsp;code. These are just a&nbsp;few ideas, and&nbsp;I am hoping one day we can have a&nbsp;more <em>standardized</em> set of&nbsp;patterns to&nbsp;use.</p>
<h3>How it works</h3>
<p>A&nbsp;(hopefully obvious) perquisite to&nbsp;mutation testing is that your unit tests need to&nbsp;<strong>pass</strong> against your original source code. Also, the&nbsp;faster your unit tests are, the&nbsp;easier mutation testing will be.</p>
<p>So, step by&nbsp;step:</p>
<ol>
<li>A&nbsp;baseline unit test is run against your original source code</li>
<li>Mutated versions of&nbsp;your code (<strong>mutants</strong>) are generated by&nbsp;changing the&nbsp;code slightly</li>
<li>Each mutant is ran against the&nbsp;same unit tests</li>
<li>If a&nbsp;mutant passes the&nbsp;test suite, it is considered <strong>killed</strong></li>
<li>Your <strong>score</strong> is calculated by&nbsp;how many mutants were killed against how many were created</li>
</ol>
<p>The&nbsp;goal is to&nbsp;try to&nbsp;kill all the&nbsp;mutants.</p>
<h3>By&nbsp;example…</h3>
<p>Here we have a&nbsp;very simple Javascript module:</p>
<pre><code class="language-javascript lang-javascript"><span class="hljs-comment">//Bank Account Module</span>
<span class="hljs-built_in">module</span>.exports = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
	<span class="hljs-keyword">var</span> balance = <span class="hljs-number">0</span>;
	<span class="hljs-keyword">this</span>.getBalance = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
		<span class="hljs-keyword">return</span> balance;
	};
	<span class="hljs-keyword">this</span>.deposit = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">amount</span>) </span>{
		balance += amount;
	};
	<span class="hljs-keyword">this</span>.withdraw = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">amount</span>) </span>{
		<span class="hljs-keyword">if</span> (balance &gt;= amount) {
			balance -= amount;
			<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
		} <span class="hljs-keyword">else</span> {
			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
		}
	};
	<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;
};
</code></pre>
<p>Easy mutation could be to&nbsp;change the&nbsp;balance literal to&nbsp;initialize to&nbsp;-1.</p>
<p>If our unit tests started each check with a&nbsp;clean Account instance and&nbsp;assumed that the&nbsp;balance should be 0, our tests would fail.</p>
<pre><code class="language-javascript lang-lisp">//Unit Test <span class="hljs-list">(<span class="hljs-keyword">Wrong</span>)</span>
it<span class="hljs-list">(<span class="hljs-quoted">'should</span> deposit', function<span class="hljs-list">()</span> {
	account.deposit<span class="hljs-list">(<span class="hljs-number">50</span>)</span><span class="hljs-comment">;</span>
	account.getBalance<span class="hljs-list">()</span>.should.equal<span class="hljs-list">(<span class="hljs-number">50</span>)</span><span class="hljs-comment">;</span>
})</span><span class="hljs-comment">;</span>
</code></pre>
<p>The&nbsp;corrected unit test might look something like this:</p>
<pre><code class="language-javascript lang-lisp">//Unit Test <span class="hljs-list">(<span class="hljs-keyword">Corrected</span>)</span>
it<span class="hljs-list">(<span class="hljs-quoted">'should</span> deposit', function<span class="hljs-list">()</span> {
	var initial = account.getBalance<span class="hljs-list">()</span><span class="hljs-comment">;</span>
	account.deposit<span class="hljs-list">(<span class="hljs-number">50</span>)</span><span class="hljs-comment">;</span>
	account.getBalance<span class="hljs-list">()</span>.should.equal<span class="hljs-list">(<span class="hljs-keyword">initial</span> + <span class="hljs-number">50</span>)</span><span class="hljs-comment">;</span>
})</span><span class="hljs-comment">;</span>
</code></pre>
<p>This is <strong>one</strong> example where mutation testing could help.</p>
<h3>So I&nbsp;created something</h3>
<p>In&nbsp;order to&nbsp;better understand and&nbsp;learn about mutation testing, I&nbsp;wanted to&nbsp;write my&nbsp;own Javascript mutation tester. I&nbsp;found one project for&nbsp;mutation testing in&nbsp;Javascript, and&nbsp;although I&nbsp;am normally a&nbsp;fan of&nbsp;"don't <nobr>re-invent</nobr> the&nbsp;wheel". In&nbsp;this case, the&nbsp;tool was only usable for&nbsp;<em>grunt</em> built projects. I&nbsp;wanted to&nbsp;create a&nbsp;more general use tool which was (build system) agnostic.</p>
<p>Big hurdle I&nbsp;hit with writing this was actually "node-specifc" issues. While mutating source code, loading and&nbsp;running tests, I&nbsp;kept getting the&nbsp;same results. After hours of&nbsp;beating my&nbsp;head against the&nbsp;wall, I&nbsp;tried renaming the&nbsp;files before loading them in. Sure enough, it worked. So in&nbsp;doing this project I&nbsp;learned a&nbsp;bit more about how the&nbsp;node.js <strong>require</strong> method works and&nbsp;how it caches files.</p>
<p><a href="https://github.com/dijs/profx">Here</a> is the&nbsp;project.</p>
</article></body></html>]]></description><guid isPermaLink="false">Mutation Testing in Javascript</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Sun, 01 Mar 2015 06:00:00 GMT</pubDate></item><item><title><![CDATA[Parsz]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Parsz</title></head><body><header><a href="../" class="back">« Back</a><h1>Parsz</h1></header><time>January 25, 2015</time><article><p>I&nbsp;have been always been entranced with how much data is publicly available on&nbsp;the web. Although, most of&nbsp;the time the&nbsp;data is not directly usable for&nbsp;other purposes than reading. With so many <abbr>HTML</abbr> parsing libraries out there, it is common practice to&nbsp;build an&nbsp;application for&nbsp;a particular site and&nbsp;a specific data set. Parsz tries to&nbsp;generalize the&nbsp;"parsing" and&nbsp;focus on&nbsp;the data structure you need. Instead of&nbsp;downloading, processing, and&nbsp;transforming the&nbsp;data each time you need to&nbsp;parse a&nbsp;web page, use parsz. Enough of&nbsp;the TV commercial…</p>
<p>I&nbsp;did <abbr>NOT</abbr> originally think of&nbsp;this. <a href="https://github.com/fizx/parsley/">This guy</a> did. I&nbsp;saw it, thought it was a&nbsp;great idea and&nbsp;decided such a&nbsp;simple idea could be implemented much easier by&nbsp;using Node.</p>
<p>The&nbsp;idea that caught me was to&nbsp;not <nobr>re-implement</nobr> the&nbsp;same dang code over and&nbsp;over again (possibly with stupid mistakes) in&nbsp;order to&nbsp;preform data parsing on&nbsp;a web page. Looking back, it makes me feel stupid. <abbr>HTML</abbr> has for&nbsp;the most part, been standardized. Why did I&nbsp;never think to&nbsp;build a&nbsp;engine which would use data/element or&nbsp;data/attribute relationships to&nbsp;build a&nbsp;recipe for&nbsp;parsing needed data. I&nbsp;really like the&nbsp;notion of&nbsp;labeling the&nbsp;data by&nbsp;name and&nbsp;location and&nbsp;having "someone" else do the&nbsp;work.</p>
<p>Since <abbr>JSON</abbr> has become very popular, I&nbsp;have not built in&nbsp;<abbr>XML</abbr> based output yet, although that may be just a&nbsp;npm module away.</p>
<p>There are many improvements and&nbsp;features to&nbsp;add, like regular expression support and&nbsp;custom functions. But overall, the&nbsp;tool/library (however the&nbsp;community decides to&nbsp;use it) is in&nbsp;a fairly usable state.</p>
<p>Here is the&nbsp;<a href="https://github.com/dijs/parsz">repo</a>.</p>
<p>Have fun. Make sure to&nbsp;follow T&amp;C.</p>
</article></body></html>]]></description><guid isPermaLink="false">Parsz</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Sun, 25 Jan 2015 06:00:00 GMT</pubDate></item><item><title><![CDATA[Starters]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Starters</title></head><body><header><a href="../" class="back">« Back</a><h1>Starters</h1></header><time>January 23, 2016</time><article><p>Ever been under pressure to&nbsp;throw up a&nbsp;react/redux application in&nbsp;20 minutes?</p>
<p>Good luck!</p>
<p>I&nbsp;love the&nbsp;modern technology stack we have today for&nbsp;building isomorphic javascript applications. Webpack, Babel, React, Redux… can't get enough of&nbsp;them.</p>
<p>But when you are staring at&nbsp;a blank editor and&nbsp;need to&nbsp;code something as&nbsp;quickly as&nbsp;possible, getting the&nbsp;initial environment up usually can take longer than coding actual application. With the&nbsp;time futzing with accidental typos in&nbsp;config files, creating the&nbsp;directory structure, finding and&nbsp;downloading dependencies, etc. You could have already had a&nbsp;good wireframe with basic functionality coded.</p>
<p>This is why I&nbsp;created a&nbsp;few application starters.</p>
<p>Babel: <a href="https://github.com/dijs/babel-starter">https://github.com/dijs/babel-starter</a></p>
<p>React: <a href="https://github.com/dijs/react-starter">https://github.com/dijs/react-starter</a></p>
<p>Redux: <a href="https://github.com/dijs/redux-starter">https://github.com/dijs/redux-starter</a></p>
<p>I&nbsp;hope these are useful.</p>
</article></body></html>]]></description><guid isPermaLink="false">Starters</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Sat, 23 Jan 2016 06:00:00 GMT</pubDate></item><item><title><![CDATA[Pivotal Charts]]></title><description><![CDATA[<!doctype html>
<html><head><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.1.0/styles/zenburn.min.css"/><link rel="stylesheet" type="text/css" href="../css/post.css"/><link rel="icon" type="image/png" href="../public/favicon.png"/><meta name="viewport" content="width=device-width, initial-scale=1"/><title>Pivotal Charts</title></head><body><header><a href="../" class="back">« Back</a><h1>Pivotal Charts</h1></header><time>January 18, 2015</time><article><h3>Backstory</h3>
<p>During my&nbsp;day job, visualizing our development progress is very helpful for&nbsp;the team. Personally, I&nbsp;am not good at&nbsp;choosing which way to&nbsp;visualize this data, but once seen, I&nbsp;understand the&nbsp;value of&nbsp;them. We recently acquired a&nbsp;project manager for&nbsp;the team. He spent time creating charts of&nbsp;our sprint progress by&nbsp;hand, almost every day. While these charts were very useful and&nbsp;telling, my&nbsp;engineering brain could not let go of&nbsp;the fact that we should be able to&nbsp;see this, anytime, with any teams data. So I&nbsp;made it.</p>
<p>I&nbsp;have started with only one graph. But I&nbsp;believe it is a&nbsp;important graph to&nbsp;have. It shows the&nbsp;progress of&nbsp;sprint stories over time. Our developers use it on&nbsp;a daily basis, during our stand ups. The&nbsp;project managers have been the&nbsp;key user of&nbsp;this project and&nbsp;have been very helpful. They can instantly find ways to&nbsp;make it more useful for&nbsp;them and&nbsp;the team.</p>
<p>Enough backstory, lets talk code.</p>
<h3>Development</h3>
<p>We use <a href="https://www.pivotaltracker.com">Pivotal</a> here to&nbsp;track our stories (bugs, chores, features…) and&nbsp;they have a&nbsp;pretty decent <abbr>API</abbr>. I&nbsp;had used their <abbr>API</abbr> on&nbsp;many other occasions creating internal apps for&nbsp;our team. But this project seemed to&nbsp;be begging to&nbsp;be open source. I&nbsp;generalized the&nbsp;data gathering and&nbsp;processing as&nbsp;much as&nbsp;I could. The&nbsp;filters in&nbsp;the app itself should work for&nbsp;any team. I&nbsp;stuck to&nbsp;a node app for&nbsp;ease of&nbsp;development, since I&nbsp;had already written a&nbsp;module for&nbsp;the Pivotal <abbr>API</abbr>. I&nbsp;got lots of&nbsp;practice with the&nbsp;use of&nbsp;<a href="http://underscorejs.org/">underscore</a> chaining for&nbsp;data processing. By&nbsp;finding the&nbsp;ways to&nbsp;filter/map/group your data, you can truly make your code pretty and&nbsp;easy to&nbsp;understand. The&nbsp;difficult part was actually transforming the&nbsp;data to&nbsp;work with the&nbsp;chart <a href="http://nvd3.org/">library</a>. By&nbsp;the way, if anyone can see a&nbsp;better way to&nbsp;transform the&nbsp;data, please let me know! The&nbsp;charting library I&nbsp;used was a&nbsp;powerful tool, but hard to&nbsp;find documentation for. I&nbsp;believe the&nbsp;project owner has switched/forked a&nbsp;few times.</p>
<p><img src="http://www.richardvanderdys.com/projects/pivotal-charts/screenshot.png" alt="Screenshot"></p>
<h3>Future</h3>
<p>I&nbsp;believe this project can be expanded upon in&nbsp;a big way. I&nbsp;am sure many other teams have their own favorite graphs. I&nbsp;would love to&nbsp;see the&nbsp;community help add those graphs. I&nbsp;plan on&nbsp;making a&nbsp;"dashboard" index page to&nbsp;show off all the&nbsp;graphs we currently manage. This is of&nbsp;course limited to&nbsp;teams who use Pivotal, but even that may be generalized out one day…</p>
<p>Here is the&nbsp;Github project: <a href="https://github.com/dijs/pivotal-charts">https://github.com/dijs/pivotal-charts</a></p>
</article></body></html>]]></description><guid isPermaLink="false">Pivotal Charts</guid><dc:creator><![CDATA[Richard van der Dys III]]></dc:creator><pubDate>Sun, 18 Jan 2015 06:00:00 GMT</pubDate></item></channel></rss>